# 최소 힙

'''
<힙>
자료구조의 경우

완전 이진 트리로서
루트 노드 + 왼쪽 자식 + 오른쪽 자식

이렇게 3가지 형태로 구성되어 있는 자료구조를 의미한다

< 최소 힙 >
루트노드쪽으로 올라갈수록, 작은 값이 저장되는 원리

즉, 부모 노드가, 자식 노드보다 더 '작은' 값을 가지게 되는
원리가 적욛되는 것이다

    1
  2   3
4  5 6  7

1) 데이터 삽입하기 ( 입력하기 )
정렬되는 원리는 다음과 같다.

push를 하게 되면

맨 아래 ?? 레벨에 숫자가 들어가게 되고
그때부터, 부모 노드와의 비교를 통해서
부모 노드가 자기보다 크면, 부모 노드와 자신의 값을 바꿔주고
이러한 과정을 지속적으로
반복하는 것이다

2) 데이터 제거하기 ( pop )

최소 힙. 의 경우

heap에서 pop을 하면
현재 heap에 들어있는
가장 작은 값이 pop 되어 나오게 된다

그렇다면 pop 되고 나서 heap은 어떤 구성을 띄게 될까 ??
    ()
  2   3
4  5 6  7

위와 같이, 가장 위의 값을 pop 했다고 했을때
일반적으로 heap에서 이루어지는 과정은,
맨 오른쪽 아래의 값을
다시 맨위에 올려놓고

데이터 삽입시 했던 것처럼
부모 ~ 자식 노드간의 비교를 통해
다시 최소 heap 형태로 만들어주는 것이다

    7
  2   3
4  5 6

    |
    |

    2
  4   3
7  5 6

'''

import heapq as hq
a = []

while True:
    n = int(input())
    if n == -1:
        break
    if n == 0:  # n 이 0 이면, heap에서 출력을 해야한다
        if len(a) == 0:  # heap이 비어있다는 것
            print(-1)
        else:
            print(hq.heappop(a))
    else:
        hq.heappush(a, n)

'''
1) 자연수가 입력되면 최소힙에 입력한다.
2) 숫자 0 이 입력되면 최소힙에서 최솟값을 꺼내어 출력한다.
 (출력할 자료가 없으면 -1를 출력한다.)
3) -1이 입력되면 프로그램 종료한다.

'''


# 최대 힙

a = []

while True:
    n = int(input())
    if n == -1:
        break
    if n == 0:  # n 이 0 이면, heap에서 출력을 해야한다
        if len(a) == 0:  # heap이 비어있다는 것
            print(-1)
        else:
            print(hq.heappop(a)[1])
    else:
        # 파이썬 상 라이브러리에는, 최소 힙밖에 없다.
        # 최대 힙 원리를 이용하려면, 아래와 같이 tuple 형태 입력
        # 그 다음 0번째 idx에 음수 버전 삽입
        # 그러면, 우리가 넣은 값들이 0번째 idx를 기준으로 최소 힙 정렬될 것이고
        # 결과적으로 루트 노드에는 -n이 가장 작은 값, 반대로 n이 가장 큰값
        # 그래서 pop할때, pop 한 tuple의 1번째 idx는, 우리가 넣은 n 중, 가장 큰 값이 나온다
        # 최대 힙 원리가 적용되는 것이다
        hq.heappush(a, (-n, n))
